#!/bin/sh

# Development environment setup script
#
# This script copies configuration files from the DEV_ENV_HOME to their respective locations.

# $1 --dry Optional to perform a dry run without making any changes.
main() {
    dry_run=0

    if [ -z "$DEV_ENV_HOME" ]; then
        log $dry_run "env var DEV_ENV_HOME needs to be present and point to the cachydev-repository"
        exit 1
    fi

    if [[ $1 == "--dry" ]]; then
        dry_run=1
    fi


    update_files $dry_run $DEV_ENV_HOME/env/.config $HOME/.config

    if [ ! -d "$HOME/.local/bin" ]; then
        mkdir -p "$HOME/.local/bin"
        echo "Created $HOME/.local/bin"
    fi

    copy_file $dry_run $DEV_ENV_HOME/dev-env $HOME/.local/bin/dev-env
    copy_file $dry_run $DEV_ENV_HOME/tmux-sessionizer/tmux-sessionizer $HOME/.local/bin/tmux-sessionizer
}



# Logs messages to the console, prepending [DRY_RUN] if in dry run mode
# $1 dry_run
# $2 message to log
log() {
    dry_run=$1
    message=$2

    if [[ $dry_run == 1 ]]; then
        echo "[DRY_RUN]: $message"
    else
        echo "$message"
    fi
}

# Updates configuration files from source to destination directory
# $1 dry_run
# $2 source directory
# $3 destination directory
update_files() {
    dry_run=$1
    source_dir=$2
    dest_dir=$3

    log $dry_run "copying over files from: $source_dir"
    pushd $source_dir &> /dev/null
    (
        configs=`find . -mindepth 1 -maxdepth 1 -type d`
        for c in $configs; do
            directory=${3%/}/${c#./}
            log $dry_run "    removing: rm -rf $directory"

            if [[ $dry_run == 0 ]]; then
                # remove file if it exists
                [ -e $to ] && rm -rf $directory
            fi

            log $dry_run "    copying env: cp $c $dest_dir"
            if [[ $dry_run == 0 ]]; then
                cp -r ./$c $dest_dir
            fi
        done

    )
    popd &> /dev/null
}

# Copies a file from $2 to $3
# $1 dry_run flag
# $2 source file
# $3 destination file
copy_file() {
    dry_run=$1
    from=$2
    to=$3

    log $dry_run "removing: $to"
    if [[ $dry_run == 0 ]]; then
        # remove file if it exists
        [ -e $to ] && rm $to
    fi
    log $dry_run "copying: $from to $to"
    if [[ $dry_run == 0 ]]; then
        cp $from $to
    fi
}

main "$@"
