#!/bin/bash

# This script searches for executable scripts in the "runs" subdirectory relative to the script's location,
# filters them based on an optional grep pattern provided as a command-line argument,
# and executes the filtered scripts.
# Supports a "dry run" mode that only logs which scripts would be run without actually executing them.

# Usage:
# ./script.sh [--dry] [grep_pattern]
#   --dry         Runs in dry-run mode, printing which scripts would run without executing.
#   grep_pattern  Optional pattern to filter which scripts to execute based on their paths.

set -e # Exit immediately if any command fails

# Resolve the directory where this script resides, even when called from elsewhere
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

grep=""
dry_run="0"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    echo "ARG: \"$1\""
    if [[ "$1" == "--dry" ]]; then
        dry_run="1"
    else
        grep="$1"
    fi
    shift
done

# Logging function
log() {
    if [[ $dry_run == "1" ]]; then
        echo "[DRY_RUN]: $1"
    else
        echo "$1"
    fi
}

log "RUN: env: $env -- grep: $grep"

# Find all executable files in the 'runs' directory inside the script's directory
runs_dir=$(find "$script_dir/runs" -mindepth 1 -maxdepth 1 -executable)

# Loop through each executable script found
for s in $runs_dir; do
    # If a grep pattern is provided and the script's path does NOT match the pattern, skip it
    if echo "$s" | grep -vq "$grep"; then
        log "grep \"$grep\" filtered out $s"
        continue
    fi

    log "running script: $s"

    # Execute the script unless in dry-run mode
    if [[ $dry_run == "0" ]]; then
        $s
    fi
done

